// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Выводит все метрики в html виде",
                "responses": {
                    "200": {
                        "description": "HTML страница с метриками",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "tags": [
                    "Info"
                ],
                "summary": "Запрос состояния соединения с базой данных",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Нет соединения с БД",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update/": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Обновление одной метрики с передачей данных в JSON формате",
                "parameters": [
                    {
                        "description": "Принимает JSON с данными метрики, возвращает JSON с обновленными данными",
                        "name": "metric",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Metrics"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Metrics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/updates/": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Массовое обновление данных метрик с передачей данных в JSON формате",
                "parameters": [
                    {
                        "description": "Принимает JSON массивом метрик, возвращает JSON с обновленными данными",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Metrics"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Metrics"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/value/": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Запрос одной метрики с указанием её типа и имени",
                "parameters": [
                    {
                        "description": "Сервис принимает пустую метрику с указанием типа и имени метрики, отдает JSON наполненный данными",
                        "name": "metric",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyMetric"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Metrics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/value/{metric_type}/{metric_name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Запрос одной метрики с указанием её типа и имени",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Тип метрики: counter, gauge",
                        "name": "metric_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Имя метрики",
                        "name": "metric_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Metrics"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/value/{metric_type}/{metric_name}/{value}": {
            "get": {
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Запрос одной метрики с указанием её типа и имени",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Тип метрики: counter, gauge",
                        "name": "metric_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Имя метрики",
                        "name": "metric_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Значение метрики",
                        "name": "value",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Текущее значение метрики",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.EmptyMetric": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "имя метрики",
                    "type": "string"
                },
                "type": {
                    "description": "параметр, принимающий значение gauge или counter",
                    "type": "string"
                }
            }
        },
        "dto.Metrics": {
            "type": "object",
            "properties": {
                "delta": {
                    "description": "Delta значение метрики в случае передачи counter",
                    "type": "integer"
                },
                "hash": {
                    "description": "Hash значение хеш-функции - подпись для проверки подлинности метрики",
                    "type": "string"
                },
                "id": {
                    "description": "ID имя метрики",
                    "type": "string"
                },
                "type": {
                    "description": "MType параметр, принимающий значение gauge или counter",
                    "type": "string"
                },
                "value": {
                    "description": "Value значение метрики в случае передачи gauge",
                    "type": "number"
                }
            }
        }
    },
    "tags": [
        {
            "description": "\"Группа запросов состояния сервиса\"",
            "name": "Info"
        },
        {
            "description": "\"Группа для работы с данными метрик\"",
            "name": "Metrics"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Metrics storage API",
	Description:      "Сервис хранения метрик и счетчиков.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevMetricsClient is the client API for DevMetrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevMetricsClient interface {
	UpdateMetrics(ctx context.Context, in *UpsertMetricsRequest, opts ...grpc.CallOption) (*UpsertMetricsResponse, error)
}

type devMetricsClient struct {
	cc grpc.ClientConnInterface
}

func NewDevMetricsClient(cc grpc.ClientConnInterface) DevMetricsClient {
	return &devMetricsClient{cc}
}

func (c *devMetricsClient) UpdateMetrics(ctx context.Context, in *UpsertMetricsRequest, opts ...grpc.CallOption) (*UpsertMetricsResponse, error) {
	out := new(UpsertMetricsResponse)
	err := c.cc.Invoke(ctx, "/metrics.DevMetrics/UpdateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevMetricsServer is the server API for DevMetrics service.
// All implementations must embed UnimplementedDevMetricsServer
// for forward compatibility
type DevMetricsServer interface {
	UpdateMetrics(context.Context, *UpsertMetricsRequest) (*UpsertMetricsResponse, error)
	mustEmbedUnimplementedDevMetricsServer()
}

// UnimplementedDevMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedDevMetricsServer struct {
}

func (UnimplementedDevMetricsServer) UpdateMetrics(context.Context, *UpsertMetricsRequest) (*UpsertMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (UnimplementedDevMetricsServer) mustEmbedUnimplementedDevMetricsServer() {}

// UnsafeDevMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevMetricsServer will
// result in compilation errors.
type UnsafeDevMetricsServer interface {
	mustEmbedUnimplementedDevMetricsServer()
}

func RegisterDevMetricsServer(s grpc.ServiceRegistrar, srv DevMetricsServer) {
	s.RegisterService(&DevMetrics_ServiceDesc, srv)
}

func _DevMetrics_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevMetricsServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.DevMetrics/UpdateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevMetricsServer).UpdateMetrics(ctx, req.(*UpsertMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevMetrics_ServiceDesc is the grpc.ServiceDesc for DevMetrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevMetrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.DevMetrics",
	HandlerType: (*DevMetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetrics",
			Handler:    _DevMetrics_UpdateMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metrics.proto",
}
